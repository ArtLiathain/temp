# Edit this Makefile as required for your environment. If you have your
# own LAPACK libraries use these in preference to the minimal library
# supplied (ssyevr.f) as this will almost certainly be faster

# Define the location of your vmd install
# f77_molfile.o must have already been compiled in VMD_F77DIR
#
# comment out all these lines if you have no plugins available
VMD_HOME       = /usr/remote/vmd/
VMD_ARCH       = LINUXIA64
VMD_ARCHDIR    = $(VMD_HOME)/plugins/compile/lib_$(VMD_ARCH)/molfile
# VMD_F77DIR     = $(VMD_HOME)/plugins/molfile_plugin/f77
VMD_F77DIR     = ~/src/molfiletest
NETCDFLDFLAGS  = -lnetcdf
TCLLDFLAGS     = -ltcl8.5
LDFLAGS        = -L$(VMD_ARCHDIR)
LDLIBS         =  -lmolfile_plugin $(NETCDFLDFLAGS) $(TCLLDFLAGS) -lstdc++ -ldl
REALMOLFILEOBJ = $(VMD_F77DIR)/f77_molfile.o
#
# if you have no VMD plugins available, uncomment the next line:
#MOLFILEOBJ      = molfile_substitute.o

# Define your FORTRAN compiler
FC = ifort

# Compiler options
NOOPT   = 
FFLAGS  = -O
CFLAGS  = -O
#FFLAGS = -g -traceback
#CFLAGS = -g -traceback
SFX     = 

# Lapack options:
# The line below may well work if you have the Intel Maths Kernel Library 10.3:
 LIBS     = -lmkl_lapack95_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lpthread 
# The line below may well work if you have the Intel Maths Kernel Library 10.2:
# LIBS     = -lmkl_lapack -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lguide -lpthread 
# and the line below for cygwin users, maybe:
# LIBS     = ~/LAPACK/lapack_CygwinG95.a ~/LAPACK/blas_CygwinG95.a

# if you have no Lapack library, uncomment the next line:
#LAPACKOBJ  = ssyevr.o slamch.o

# List of compile objects for PCAZIP;
OBJECTS_pcazip=mygetargs.o trajutils.o geom.o eigenutils.o x_io.o matfit.o pcz_io.o pcazip.o rscode.o $(LAPACKOBJ) $(MOLFILEOBJ)


#######################################################################################


install: all
	mv pcazip pcaunzip pczdump pczcomp quickmask ../bin

all:    pcazip pcaunzip pczdump pczcomp quickmask


pcazip: 
	$(FC) $(FFLAGS) $(LDFLAGS) -o $@ $^ $(REALMOLFILEOBJ) $(LIBS) $(LDLIBS)

quickmask: 
	$(FC) $(FFLAGS) $(LDFLAGS) -o $@ $^ $(REALMOLFILEOBJ) $(LDLIBS)

pczdump:
	$(FC) $(FFLAGS) -o $@ $^

pcaunzip: 
	$(FC) $(FFLAGS) -o $@ $^

pczcomp: 
	$(FC) $(FFLAGS) -o $@ $^

clean:
	rm -f ../bin/pcazip$(SFX) ../bin/pcaunzip$(SFX) ../bin/pczdump$(SFX) ../bin/pczcomp$(SFX) ../bin/quickmask *.mod *.o



##############################################################
slamch.o: slamch.f
	$(FC) $(NOOPT) -c -o $(*F).o $<

# pattern rules
.SUFFIXES:
.SUFFIXES: .f90 .f .o

.f90.o:
	$(FC) $(FFLAGS) -c -o $(*F).o $<

.f.o:
	$(FC) $(FFLAGS) -c -o $(*F).o $<


# dependencies
pcaunzip: mygetargs.o pcz_io.o rscode.o pcaunzip.o
pcazip: $(OBJECTS_pcazip)
pczcomp: mygetargs.o trajutils.o pcz_io.o matfit.o rscode.o pczcomp.o
pczdump: mygetargs.o pcz_io.o rscode.o pczdump.o
quickmask: mygetargs.o x_io.o matfit.o quickmask.o 

eigenutils.o: eigenutils.f90
matfit.o: matfit.f
mygetargs.o: mygetargs.f90
pcazip.o: pcazip.f90 pcz_io.o trajutils.o x_io.o mygetargs.o
pcaunzip.o: pcaunzip.f90 pcz_io.o mygetargs.o
pcz_io.o: pcz_io.f90 rscode.o
pczcomp.o: pczcomp.f90 pcz_io.o mygetargs.o
pczdump.o: pczdump.f90 pcz_io.o mygetargs.o
quickmask.o: quickmask.f90 trajutils.o x_io.o mygetargs.o
rscode.o: rscode.f90
ssyevr.o: ssyevr.f
trajutils.o: trajutils.f90
geom.o: geom.f90
x_io.o: x_io.f90 
molfile_substitute.o: molfile_substitute.f90


