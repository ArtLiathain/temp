// 
//  This file is part of the FFEA simulation package
//  
//  Copyright (c) by the Theory and Development FFEA teams,
//  as they appear in the README.md file. 
// 
//  FFEA is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
// 
//  FFEA is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
// 
//  You should have received a copy of the GNU General Public License
//  along with FFEA.  If not, see <http://www.gnu.org/licenses/>.
// 
//  To help us fund FFEA development, we humbly ask that you cite 
//  the research papers on the package.
//

#ifndef EULER_CHARACTERISTIC_TABLE
#define EULER_CHARACTERISTIC_TABLE
		int get_euler_characteristic_x_4(int flags[8])
		{
			const int euler_characteristic_x_4_lookup_table[257] = {
				0,
				1,
				1,
				0,
				1,
				-2,
				0,
				-1,
				1,
				0,
				-2,
				-1,
				0,
				-1,
				-1,
				0,
				1,
				0,
				-2,
				-1,
				-2,
				-3,
				-3,
				-2,
				-2,
				-1,
				-5,
				-2,
				-3,
				-2,
				-4,
				-1,
				1,
				-2,
				0,
				-1,
				-2,
				-5,
				-1,
				-2,
				-2,
				-3,
				-3,
				-2,
				-3,
				-4,
				-2,
				-1,
				0,
				-1,
				-1,
				0,
				-3,
				-4,
				-2,
				-1,
				-3,
				-2,
				-4,
				-1,
				-4,
				-3,
				-3,
				0,
				1,
				-2,
				-2,
				-3,
				0,
				-3,
				-1,
				-2,
				-2,
				-3,
				-5,
				-4,
				-1,
				-2,
				-2,
				-1,
				-2,
				-3,
				-5,
				-4,
				-3,
				-4,
				-4,
				-3,
				-5,
				-4,
				-8,
				-5,
				-4,
				-3,
				-5,
				-2,
				0,
				-3,
				-1,
				-2,
				-1,
				-4,
				0,
				-1,
				-3,
				-4,
				-4,
				-3,
				-2,
				-3,
				-1,
				0,
				-1,
				-2,
				-2,
				-1,
				-2,
				-3,
				-1,
				0,
				-4,
				-3,
				-5,
				-2,
				-3,
				-2,
				-2,
				1,
				1,
				-2,
				-2,
				-3,
				-2,
				-5,
				-3,
				-4,
				0,
				-1,
				-3,
				-2,
				-1,
				-2,
				-2,
				-1,
				0,
				-1,
				-3,
				-2,
				-3,
				-4,
				-4,
				-3,
				-1,
				0,
				-4,
				-1,
				-2,
				-1,
				-3,
				0,
				-2,
				-5,
				-3,
				-4,
				-5,
				-8,
				-4,
				-5,
				-3,
				-4,
				-4,
				-3,
				-4,
				-5,
				-3,
				-2,
				-1,
				-2,
				-2,
				-1,
				-4,
				-5,
				-3,
				-2,
				-2,
				-1,
				-3,
				0,
				-3,
				-2,
				-2,
				1,
				0,
				-3,
				-3,
				-4,
				-1,
				-4,
				-2,
				-3,
				-1,
				-2,
				-4,
				-3,
				0,
				-1,
				-1,
				0,
				-1,
				-2,
				-4,
				-3,
				-2,
				-3,
				-3,
				-2,
				-2,
				-1,
				-5,
				-2,
				-1,
				0,
				-2,
				1,
				-1,
				-4,
				-2,
				-3,
				-2,
				-5,
				-1,
				-2,
				-2,
				-3,
				-3,
				-2,
				-1,
				-2,
				0,
				1,
				0,
				-1,
				-1,
				0,
				-1,
				-2,
				0,
				1,
				-1,
				0,
				-2,
				1,
				0,
				1,
				1,
				0,
				0,
			};

			int lookup_index = flags[0] + flags[1] * 2 + flags[2] * 4 + flags[3] * 8 + flags[4] * 16 + flags[5] * 32 + flags[6] * 64 + flags[7] * 128;
			return euler_characteristic_x_4_lookup_table[lookup_index];
		}
#endif
